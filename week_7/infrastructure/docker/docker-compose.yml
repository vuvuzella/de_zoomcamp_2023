version: '3.6'

services:

  ### Jupyterlab Components ###
  jupyterlab:
    image: jupyterlab
    container_name: jupyterlab
    build:
      context: ./
      dockerfile: jupyterlab.Dockerfile
    ports:
      - 8888:8888
    volumes:
      - ../../notebooks:/opt/workspace/notebooks
      - ../../data:/opt/workspace/data

  ### Spark Components ###
  spark-master:
    image: spark-master
    container_name: spark-master
    build:
      context: ./
      dockerfile: spark-master.Dockerfile
    ports:
      - 8080:8080
      - 7077:7077
    volumes:
      - ./shared-workspace:/opt/workspace
      - ../../data:/opt/workspace/data:rw

  spark-worker-1:
    image: spark-worker
    build:
      context: ./
      dockerfile: spark-worker.Dockerfile
    container_name: spark-worker-1
    environment:
      - SPARK_WORKER_CORES=2
      - SPARK_WORKER_MEMORY=40968mb
    ports:
      - 8081:8080
    volumes:
      - ./shared-workspace:/opt/workspace
      - ../../data:/opt/workspace/data:rw
    depends_on:
      - spark-master

  spark-worker-2:
    image: spark-worker
    container_name: spark-worker-2
    build:
      context: ./
      dockerfile: spark-worker.Dockerfile
    environment:
      - SPARK_WORKER_CORES=2
      - SPARK_WORKER_MEMORY=40968mb
    ports:
      - 8082:8080
    volumes:
      - ./shared-workspace:/opt/workspace
      - ../../data:/opt/workspace/data:rw
    depends_on:
      - spark-master

  ### Kafka Components ###
  # kafka-zookeeper:
  #   image: confluentinc/cp-zookeeper:7.2.0
  #   hostname: kafka-zookeeper
  #   container_name: kafka-zookeeper
  #   ports:
  #     - 2181:2181
  #   environment:
  #     ZOOKEEPER_CLIENT_PORT: 2181
  #     ZOOKEEPER_TICK_TIME: 2000
  #     KAFKA_OPTS: -Djute.maxbuffer=500000000

  # kafka-broker:
  #   image: confluentinc/cp-kafka:7.2.0
  #   hostname: kafka-broker
  #   container_name: kafka-broker
  #   ports:
  #     - 9092:9092
  #   environment:
  #     KAFKA_BROKER_ID: 1
  #     KAFKA_ZOOKEEPER_CONNECT: kafka-zookeeper:2181
  #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
  #     KAFKA_LISTENERS: PLAINTEXT://kafka-broker:29092,PLAINTEXT_HOST://kafka-broker:9092
  #     KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker:29092,PLAINTEXT_HOST://localhost:9092
  #     KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
  #     KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  #     KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
  #     KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
  #     KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
  #   depends_on:
  #     - kafka-zookeeper

  # kafka-schema-registry:
  #   image: confluentinc/cp-schema-registry:7.2.0
  #   hostname: kafka-schema-registry
  #   container_name: kafka-schema-registry
  #   ports:
  #     - 8081:8081
  #   environment:
  #     SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: kafka-broker:29092
  #     SCHEMA_REGISTRY_HOST_NAME: localhost
  #     SCHEMA_REGISTRY_LISTENER: http://0.0.0.0:8081
  #   depends_on:
  #     - kafka-zookeeper
  #     - kafka-broker

  # kafka-control-center:
  #   image: confluentinc/cp-enterprise-control-center:7.2.0
  #   hostname: kafka-control-center
  #   container_name: kafka-control-center
  #   ports:
  #     - 9021:9021
  #   environment:
  #     CONTROL_CENTER_BOOTSTRAP_SERVERS: kafka-broker:29092
  #     CONTROL_CENTER_ZOOKEEPER_CONNECT: kafka-zookeeper:2181
  #     CONTROL_CENTER_SCHEMA_REGISTRY: http://localhost:8081
  #     CONTROL_CENTER_REPLICATION_FACTOR: 1
  #     CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
  #     CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
  #     CONFLUENT_METRICS_TOPIC_REPLICATION: 1
  #     PORT: 9021
  #   depends_on:
  #     - kafka-zookeeper
  #     - kafka-broker
  #     - kafka-schema-registry

  # kafka-rest:
  #   image: confluentinc/cp-kafka-rest:7.2.0
  #   hostname: kafka-rest
  #   container_name: kafka-rest
  #   ports:
  #     - 8082:8082
  #   environment:
  #     KAFKA_REST_BOOTSTRAP_SERVERS: kafka-broker:29092
  #     KAFKA_REST_ZOOKEEPER_CONNECT: kafka-zookeeper:2181
  #     KAFKA_REST_SCHEMA_REGISTRY_URL: http://localhost:8081
  #     KAFKA_REST_HOST_NAME: localhost
  #     KAFKA_REST_LISTENERS: http://0.0.0.0:8082
  #   depends_on:
  #     - kafka-schema-registry
  #     - kafka-broker

  ### Prefect Components ###
  prefect:
    image: prefecthq/prefect:2-python3.9
    hostname: prefect
    environment:
      - PREFECT_ORION_API_HOST=0.0.0.0
    ports:
      - 4200:4200
    command: prefect server start
    volumes:
      - ./shared-workspace/prefect:/root/.prefect
  # This may be deprecated by prefecthq/prefect image
  # prefect-dashboard:
  #   image: de_pipeline/week_2:latest
  #   restart: always
  #   environment:
  #     - PREFECT_ORION_API_HOST=0.0.0.0
  #   volumes:
  #     - ./prefect_dashboard_volume:/root/.prefect
  #   ports:
  #     - 4200:4200
  #   command: [ "poetry", "run", "prefect", "orion", "start" ]

  # create network by running `docker network create kafka-spark-network`
networks:
  default:
    name: kafka-spark-prefect-network
    external: true
